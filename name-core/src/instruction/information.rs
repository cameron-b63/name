use crate::{
    instruction::{implementation, instruction::Instruction},
    structs::{ExecutionStatus, Memory, Processor},
};

#[derive(Debug, PartialEq)]
pub struct InstructionInformation {
    pub mnemonic: &'static str,
    pub instruction_type: InstructionType,
    pub op_code: u32,
    pub funct_code: Option<u32>,
    pub implementation:
        fn(&mut Processor, &mut Memory, Instruction) -> Result<ExecutionStatus, String>,
    pub args: &'static [ArgumentType],
    pub alt_args: Option<&'static [&'static [ArgumentType]]>,
}

impl InstructionInformation {
    pub fn lookup_code(&self) -> u32 {
        self.op_code << 6 | self.funct_code.unwrap_or(0)
    }
}

#[derive(Debug, PartialEq)]
pub enum InstructionType {
    RType,
    IType,
    JType,
}

#[derive(Debug, PartialEq)]
pub enum ArgumentType {
    Rd,
    Rs,
    Rt,
    Immediate,
    Identifier,
    BranchLabel,
}

pub const INSTRUCTION_SET: &[InstructionInformation] = &[
    InstructionInformation {
        mnemonic: "add",
        op_code: 0x00,
        funct_code: Some(0x20),
        implementation: implementation::add,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "addi",
        op_code: 0x08,
        funct_code: None,
        implementation: implementation::addi,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Rs, ArgumentType::Immediate],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "addiu",
        op_code: 0x09,
        funct_code: None,
        implementation: implementation::addiu,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Rs, ArgumentType::Immediate],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "addu",
        op_code: 0x00,
        funct_code: Some(0x21),
        implementation: implementation::addu,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "and",
        op_code: 0x00,
        funct_code: Some(0x24),
        implementation: implementation::and,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "andi",
        op_code: 0x0c,
        funct_code: None,
        implementation: implementation::andi,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Rs, ArgumentType::Immediate],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "beq",
        op_code: 0x04,
        funct_code: None,
        implementation: implementation::beq,
        instruction_type: InstructionType::IType,
        args: &[
            ArgumentType::Rs,
            ArgumentType::Rt,
            ArgumentType::BranchLabel,
        ],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "bgtz",
        op_code: 0x07,
        funct_code: None,
        implementation: implementation::bgtz,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rs, ArgumentType::BranchLabel],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "blez",
        op_code: 0x06,
        funct_code: None,
        implementation: implementation::blez,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rs, ArgumentType::BranchLabel],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "bne",
        op_code: 0x05,
        funct_code: None,
        implementation: implementation::bne,
        instruction_type: InstructionType::IType,
        args: &[
            ArgumentType::Rs,
            ArgumentType::Rt,
            ArgumentType::BranchLabel,
        ],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "j",
        op_code: 0x02,
        funct_code: None,
        implementation: implementation::j,
        instruction_type: InstructionType::JType,
        args: &[ArgumentType::BranchLabel],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "jal",
        op_code: 0x03,
        funct_code: None,
        implementation: implementation::jal,
        instruction_type: InstructionType::JType,
        args: &[ArgumentType::BranchLabel],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "jalr",
        op_code: 0x00,
        funct_code: Some(0x09),
        implementation: implementation::jalr,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs],
        alt_args: Some(&[&[ArgumentType::Rs]]),
    },
    InstructionInformation {
        mnemonic: "jr",
        op_code: 0x00,
        funct_code: Some(0x08),
        implementation: implementation::jr,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rs],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "lb",
        op_code: 0x20,
        funct_code: None,
        implementation: implementation::lb,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Immediate, ArgumentType::Rs],
        alt_args: Some(&[
            &[ArgumentType::Rt, ArgumentType::Rs],
            &[ArgumentType::Rt, ArgumentType::Identifier, ArgumentType::Rs],
        ]),
    },
    InstructionInformation {
        mnemonic: "lui",
        op_code: 0x0F,
        funct_code: None,
        implementation: implementation::lui,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Immediate],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "lw",
        op_code: 0x23,
        funct_code: None,
        implementation: implementation::lw,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Immediate, ArgumentType::Rs],
        alt_args: Some(&[
            &[ArgumentType::Rt, ArgumentType::Rs],
            &[ArgumentType::Rt, ArgumentType::Identifier, ArgumentType::Rs],
        ]),
    },
    /*
      Instruction::InstructionInformation {
        mnemonic: "mfhi",
        op_code: 0x00,
        instruction_type: InstructionType::RType,
        opcode: None,
        funct_code: Some(16),
        args: &[ArgumentType::Rd],
        alt_args: None,
    },
      Instruction::InstructionInformation {
        mnemonic: "mflo",
        op_code: 0x00,
        instruction_type: InstructionType::RType,
        opcode: None,
        funct_code: Some(18),
        args: &[ArgumentType::Rd],
        alt_args: None,
    },
    */
    InstructionInformation {
        mnemonic: "nor",
        op_code: 0x00,
        funct_code: Some(0x27),
        implementation: implementation::nor,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "nop",
        op_code: 0x00,
        funct_code: Some(0x00),
        implementation: implementation::sll,
        instruction_type: InstructionType::RType,
        args: &[],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "or",
        op_code: 0x00,
        funct_code: Some(0x25),
        implementation: implementation::or,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "ori",
        op_code: 0x0D,
        funct_code: None,
        implementation: implementation::ori,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Rs, ArgumentType::Immediate],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "sb",
        op_code: 0x28,
        funct_code: None,
        implementation: implementation::sb,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Immediate, ArgumentType::Rs],
        alt_args: Some(&[
            &[ArgumentType::Rt, ArgumentType::Rs],
            &[ArgumentType::Rt, ArgumentType::Identifier, ArgumentType::Rs],
            &[ArgumentType::Rt, ArgumentType::Identifier],
        ]),
    },
    InstructionInformation {
        mnemonic: "sll",
        op_code: 0x00,
        funct_code: Some(0x00),
        implementation: implementation::sll,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rt, ArgumentType::Immediate],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "slt",
        op_code: 0x00,
        funct_code: Some(0x2A),
        implementation: implementation::slt,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "slti",
        op_code: 0x0A,
        funct_code: None,
        implementation: implementation::slti,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Rs, ArgumentType::Immediate],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "sltiu",
        op_code: 0x0B,
        funct_code: None,
        implementation: implementation::sltiu,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Rs, ArgumentType::Immediate],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "sltu",
        op_code: 0x00,
        funct_code: Some(0x2B),
        implementation: implementation::sltu,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "srl",
        op_code: 0x00,
        funct_code: Some(0x02),
        implementation: implementation::srl,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rt, ArgumentType::Immediate],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "sub",
        op_code: 0x00,
        funct_code: Some(0x22),
        implementation: implementation::sub,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "subu",
        op_code: 0x00,
        funct_code: Some(0x23),
        implementation: implementation::subu,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "sw",
        op_code: 0x2B,
        funct_code: None,
        implementation: implementation::sw,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Immediate, ArgumentType::Rs],
        alt_args: Some(&[
            &[ArgumentType::Rt, ArgumentType::Rs],
            &[ArgumentType::Rt, ArgumentType::Identifier, ArgumentType::Rs],
            &[ArgumentType::Rt, ArgumentType::Identifier],
        ]),
    },
    InstructionInformation {
        mnemonic: "syscall",
        op_code: 0x00,
        funct_code: Some(0x0C),
        implementation: implementation::syscall,
        instruction_type: InstructionType::RType,
        args: &[],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "xor",
        op_code: 0x00,
        funct_code: Some(0x26),
        implementation: implementation::xor,
        instruction_type: InstructionType::RType,
        args: &[ArgumentType::Rd, ArgumentType::Rs, ArgumentType::Rt],
        alt_args: None,
    },
    InstructionInformation {
        mnemonic: "xori",
        op_code: 0x0E,
        funct_code: None,
        implementation: implementation::xori,
        instruction_type: InstructionType::IType,
        args: &[ArgumentType::Rt, ArgumentType::Rs, ArgumentType::Immediate],
        alt_args: None,
    },
];
